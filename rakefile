require 'rake/clean'

require 'fileutils'

CLK_SPEED_HZ = 3_686_400

HERE = __dir__
CONFIG = File.expand_path(File.join(HERE, 'lib/config/modularz80.cfg'))

LIB_INCLUDE = File.join(HERE, 'lib/include')

CRT0 = FileList.new(File.join(HERE, 'lib/crt0.asm'))

CLEAN.include("lib/*.lib", "**/*.o", "**/*.bin", "**/*.hex", "**/*.diss")
CLEAN.include("**/tmp")

LIB_EXCLUDE = ["config", "include", "crt0", ".lib", "tmp"]

Dir.glob("lib/*").each do |path|
    lib = File.basename(path)
    next if LIB_EXCLUDE.any? { |e| lib.include? e }

    task "prebuild_#{lib}".to_sym do
        if File.exist?(File.join(path, "#{lib}.rb"))
            require_relative File.join(path, "#{lib}.rb")
            prebuild()
            undef prebuild
        end
    end

    dependencies = Rake::FileList.new([File.join("lib", lib, "*.asm"), File.join("lib", lib, "*.c")])
    
    desc "Build library '#{lib}'"
    task lib.to_sym => ["prebuild_#{lib}".to_sym, dependencies.ext('.o')] do
        system("z80asm -xlib/#{lib}.lib #{dependencies.ext('.o').to_a.join(" ")}")
    end
end

rule ".o" => ".c" do |t|
    system("zcc +#{CONFIG} -compiler=sccz80 -O2 -c -o #{t.name} #{t.source}")
end

rule ".o" => ".asm" do |t|
    temp_dir = File.join(File.dirname(t.source), "tmp")
    FileUtils.mkdir(temp_dir) unless Dir.exist?(temp_dir)

    system("m4 #{t.source} > #{temp_dir}/#{File.basename(t.source)}")
    system("z80asm -mz80 -o#{t.name} #{temp_dir}/#{File.basename(t.source)}")
end

# Define a task for each application.
Dir.glob("utils/*").each do |path|
    next if Dir.empty? path
    next unless File.directory? path
    
    app = File.basename(path)

    extra_includes = []

    File.open(File.join(path, "app.cfg"), "r") do |f|
        f.each_line do |l|
            if (m = /INCLUDE=(.+)$/.match(l))
                extra_includes << m[1]
            end
        end
    end

    dependencies = Rake::FileList.new([File.join("utils", app, "*.c"), File.join("utils", app, "*.asm")])

    desc "Build application '#{app}'"
    task app.to_sym => ([:stdlib, "lib/crt0.o"] + extra_includes.map { |i| i.to_sym }) do
        success = system("zcc +#{CONFIG} -compiler=sccz80 -O2 -SO2 -Llib/ -I#{LIB_INCLUDE} --no-crt -lstdlib #{extra_includes.map { |i| "-l#{i}" }.join(" ")} -Cl\"-r0x8000\" -o utils/#{app}.bin lib/crt0.o #{dependencies.to_a.join(' ')}")

        if success
            system("appmake +hex -b utils/#{app}.bin --org 0x8000 -o utils/#{app}.hex")
            system("z88dk-dis -o 0x8000 utils/#{app}.bin > utils/#{app}.diss")
        end
    end
end
